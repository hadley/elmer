% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chat.R
\name{new_chat_openai}
\alias{new_chat_openai}
\alias{ChatOpenAI}
\title{Create a chatbot that speaks to an OpenAI compatible endpoint}
\usage{
new_chat_openai(
  system_prompt = NULL,
  messages = NULL,
  base_url = "https://api.openai.com/v1",
  api_key = openai_key(),
  model = NULL,
  echo = FALSE
)
}
\arguments{
\item{system_prompt}{A system prompt to set the behavior of the assistant.}

\item{messages}{A list of messages to start the chat with (i.e., continuing a
previous conversation). If not provided, the conversation begins from
scratch. Do not provide non-\code{NULL} values for both \code{messages} and
\code{system_prompt}.

Each message in the list should be a named list with at least \code{role}
(usually \code{system}, \code{user}, or \code{assistant}, but \code{tool} is also possible).
Normally there is also a \code{content} field, which is a string.}

\item{base_url}{The base URL to the endpoint; the default uses OpenAI.}

\item{api_key}{The API key to use for authentication. You generally should
not supply this directly, but instead set the \code{OPENAI_API_KEY} environment
variable.}

\item{model}{The model to use for the chat; set to \code{NULL} (the default) to
use a reasonable model, currently \verb{gpt-4o-mini}. We strongly recommend
explicitly choosing a model for all but the most casual use.}

\item{echo}{If \code{TRUE}, the \code{chat()} method streams the response to stdout by
default. (Note that this has no effect on the \code{stream()}, \code{chat_async()},
and \code{stream_async()} methods.)}
}
\value{
A promise that resolves to a string (probably Markdown).
}
\description{
This function returns an R6 object that takes care of managing the state
associated with the chat; i.e. it records the messages that you send to the
server, and the messages that you receive back. If you register a tool
(aka an R function), it also takes care of the tool loop.
}
\examples{
\dontshow{if (elmer:::openai_key_exists()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
chat <- new_chat_openai()
chat$chat("
  What is the difference between a tibble and a data frame?
  Answer with a bulleted list
")

chat <- new_chat_openai()
chat$register_tool(
  name = "rnorm",
  description = "Drawn numbers from a random normal distribution",
  arguments = list(
    n = tool_arg(
      type = "integer",
      description = "The number of observations. Must be a positive integer."
    ),
    mean = tool_arg(
      type = "number",
      description = "The mean value of the distribution."
    ),
    sd = tool_arg(
      type = "number",
      description = "The standard deviation of the distribution. Must be a non-negative number."
    )
  )
)
chat$chat("
  Give me five numbers from a random normal distribution.
  Briefly explain your work.
")
\dontshow{\}) # examplesIf}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ChatOpenAI-new}{\code{ChatOpenAI$new()}}
\item \href{#method-ChatOpenAI-messages}{\code{ChatOpenAI$messages()}}
\item \href{#method-ChatOpenAI-chat}{\code{ChatOpenAI$chat()}}
\item \href{#method-ChatOpenAI-chat_async}{\code{ChatOpenAI$chat_async()}}
\item \href{#method-ChatOpenAI-stream}{\code{ChatOpenAI$stream()}}
\item \href{#method-ChatOpenAI-stream_async}{\code{ChatOpenAI$stream_async()}}
\item \href{#method-ChatOpenAI-console}{\code{ChatOpenAI$console()}}
\item \href{#method-ChatOpenAI-register_tool}{\code{ChatOpenAI$register_tool()}}
\item \href{#method-ChatOpenAI-clone}{\code{ChatOpenAI$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatOpenAI-new"></a>}}
\if{latex}{\out{\hypertarget{method-ChatOpenAI-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatOpenAI$new(base_url, model, messages, api_key, echo = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{base_url}}{The base URL to the endpoint; the default uses ChatGPT.}

\item{\code{model}}{The model to use for the chat; defaults to GPT-4o mini.}

\item{\code{messages}}{An unnamed list of messages to start the chat with (i.e.,
continuing a previous conversation). If \code{NULL} or zero-length list, the
conversation begins from scratch.}

\item{\code{api_key}}{The API key to use for authentication. You generally should
not supply this directly, but instead set the \code{OPENAI_API_KEY} environment
variable.}

\item{\code{echo}}{If \code{TRUE}, the \code{chat()} method streams the response to stdout
(while also returning the final response). Note that this has no effect
on the \code{stream()}, \code{chat_async()}, and \code{stream_async()} methods.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatOpenAI-messages"></a>}}
\if{latex}{\out{\hypertarget{method-ChatOpenAI-messages}{}}}
\subsection{Method \code{messages()}}{
The messages that have been sent and received so far
(optionally starting with the system prompt, if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatOpenAI$messages(include_system_prompt = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_system_prompt}}{Whether to include the system prompt in the
messages (if any exists).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatOpenAI-chat"></a>}}
\if{latex}{\out{\hypertarget{method-ChatOpenAI-chat}{}}}
\subsection{Method \code{chat()}}{
Submit text to the chatbot, and return the response as a
simple string (probably Markdown).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatOpenAI$chat(text, echo = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{The text to send to the chatbot.}

\item{\code{echo}}{Whether to emit the response to stdout as it is received. If
\code{NULL}, then the value of \code{echo} set when the chat object was created
will be used.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatOpenAI-chat_async"></a>}}
\if{latex}{\out{\hypertarget{method-ChatOpenAI-chat_async}{}}}
\subsection{Method \code{chat_async()}}{
Submit text to the chatbot, and receive a promise that
resolves with the response all at once.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatOpenAI$chat_async(text)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{The text to send to the chatbot.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatOpenAI-stream"></a>}}
\if{latex}{\out{\hypertarget{method-ChatOpenAI-stream}{}}}
\subsection{Method \code{stream()}}{
Submit text to the chatbot, returning streaming results.
Returns A \href{https://coro.r-lib.org/articles/generator.html#iterating}{coro generator}
that yields strings. While iterating, the generator will block while
waiting for more content from the chatbot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatOpenAI$stream(text)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{The text to send to the chatbot.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatOpenAI-stream_async"></a>}}
\if{latex}{\out{\hypertarget{method-ChatOpenAI-stream_async}{}}}
\subsection{Method \code{stream_async()}}{
Submit text to the chatbot, returning asynchronously
streaming results. Returns a \href{https://coro.r-lib.org/reference/async_generator.html}{coro async generator} that
yields string promises.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatOpenAI$stream_async(text)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{The text to send to the chatbot.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatOpenAI-console"></a>}}
\if{latex}{\out{\hypertarget{method-ChatOpenAI-console}{}}}
\subsection{Method \code{console()}}{
Enter an interactive chat console. This is a REPL-like
interface where you can chat with the assistant in real-time. (Only
available in \code{\link[=interactive]{interactive()}} mode.)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatOpenAI$console()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatOpenAI-register_tool"></a>}}
\if{latex}{\out{\hypertarget{method-ChatOpenAI-register_tool}{}}}
\subsection{Method \code{register_tool()}}{
Register a tool (an R function) that the chatbot can use.
If the chatbot decides to use the function, elmer will automatically
call it and submit the results back.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatOpenAI$register_tool(fun, name, description, arguments, strict = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fun}}{The function to be invoked when the tool is called.}

\item{\code{name}}{The name of the function.}

\item{\code{description}}{A detailed description of what the function does.
Generally, the more information that you can provide here, the better.}

\item{\code{arguments}}{A named list of arguments that the function accepts.
Should be a named list of objects created by \code{\link[=tool_arg]{tool_arg()}}.}

\item{\code{strict}}{Should the argument definition be strictly enforced? If
\code{TRUE}, enables \href{https://platform.openai.com/docs/guides/structured-outputs}{Structured Output}
mode, which comes with a number of \href{https://platform.openai.com/docs/guides/structured-outputs/supported-schemas}{additional requirements}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChatOpenAI-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ChatOpenAI-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChatOpenAI$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
