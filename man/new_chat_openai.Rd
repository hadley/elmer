% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api-openai.R
\name{new_chat_openai}
\alias{new_chat_openai}
\title{Create a chatbot that speaks to an OpenAI compatible endpoint}
\usage{
new_chat_openai(
  system_prompt = NULL,
  turns = NULL,
  base_url = "https://api.openai.com/v1",
  api_key = openai_key(),
  model = NULL,
  seed = NULL,
  api_args = list(),
  echo = FALSE
)
}
\arguments{
\item{system_prompt}{A system prompt to set the behavior of the assistant.}

\item{turns}{A list of turns to start the chat with (i.e., continuing a
previous conversation). If not provided, the conversation begins from
scratch. Do not provide non-\code{NULL} values for both \code{turns} and
\code{system_prompt}.

Each message in the list should be a named list with at least \code{role}
(usually \code{system}, \code{user}, or \code{assistant}, but \code{tool} is also possible).
Normally there is also a \code{content} field, which is a string.}

\item{base_url}{The base URL to the endpoint; the default uses OpenAI.}

\item{api_key}{The API key to use for authentication. You generally should
not supply this directly, but instead set the \code{OPENAI_API_KEY} environment
variable.}

\item{model}{The model to use for the chat. The default, \code{NULL}, will pick
a reasonable default, and tell you about. We strongly recommend explicitly
choosing a model for all but the most casual use.}

\item{seed}{Optional integer seed that ChatGPT uses to try and make output
more reproducible.}

\item{api_args}{Named list of arbitrary extra arguments passed to every
chat API call.}

\item{echo}{If \code{TRUE}, the \code{chat()} method streams the response to stdout by
default. (Note that this has no effect on the \code{stream()}, \code{chat_async()},
and \code{stream_async()} methods.)}
}
\value{
A \link{Chat} object.
}
\description{
This function returns a \link{Chat} object that takes care of managing the state
associated with the chat; i.e. it records the turns that you send to the
server, and the turns that you receive back. If you register a tool
(aka an R function), it also takes care of the tool loop.
}
\examples{
\dontshow{if (elmer:::openai_key_exists()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
chat <- new_chat_openai()
chat$chat("
  What is the difference between a tibble and a data frame?
  Answer with a bulleted list
")

chat <- new_chat_openai()
chat$register_tool(
  fun = rnorm,
  name = "rnorm",
  description = "Drawn numbers from a random normal distribution",
  arguments = list(
    n = tool_arg(
      type = "integer",
      description = "The number of observations. Must be a positive integer."
    ),
    mean = tool_arg(
      type = "number",
      description = "The mean value of the distribution."
    ),
    sd = tool_arg(
      type = "number",
      description = "The standard deviation of the distribution. Must be a non-negative number."
    )
  )
)
chat$chat("
  Give me five numbers from a random normal distribution.
  Briefly explain your work.
")
\dontshow{\}) # examplesIf}
}
