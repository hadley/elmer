% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chat.R
\name{Chat}
\alias{Chat}
\title{A chat}
\description{
A \code{Chat} is an sequence of sequence of user and assistant \link{Turn}s sent
to a specific \link{Provider}. A \code{Chat} is a mutable R6 object that takes care of
managing the state associated with the chat; i.e. it records the messages
that you send to the server, and the messages that you receive back.
If you register a tool (i.e. an R function that the assistant can call on
your behalf), it also takes care of the tool loop.

You should generally not create this object yourself,
but instead call \code{\link[=chat_openai]{chat_openai()}} or friends instead.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Chat-new}{\code{Chat$new()}}
\item \href{#method-Chat-get_turns}{\code{Chat$get_turns()}}
\item \href{#method-Chat-set_turns}{\code{Chat$set_turns()}}
\item \href{#method-Chat-get_system_prompt}{\code{Chat$get_system_prompt()}}
\item \href{#method-Chat-set_system_prompt}{\code{Chat$set_system_prompt()}}
\item \href{#method-Chat-tokens}{\code{Chat$tokens()}}
\item \href{#method-Chat-last_turn}{\code{Chat$last_turn()}}
\item \href{#method-Chat-chat}{\code{Chat$chat()}}
\item \href{#method-Chat-extract_data}{\code{Chat$extract_data()}}
\item \href{#method-Chat-extract_data_async}{\code{Chat$extract_data_async()}}
\item \href{#method-Chat-chat_async}{\code{Chat$chat_async()}}
\item \href{#method-Chat-stream}{\code{Chat$stream()}}
\item \href{#method-Chat-stream_async}{\code{Chat$stream_async()}}
\item \href{#method-Chat-register_tool}{\code{Chat$register_tool()}}
\item \href{#method-Chat-clone}{\code{Chat$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-new"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$new(provider, turns, seed = NULL, echo = "none")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{provider}}{A provider object.}

\item{\code{turns}}{An unnamed list of turns to start the chat with (i.e.,
continuing a previous conversation). If \code{NULL} or zero-length list, the
conversation begins from scratch.}

\item{\code{seed}}{Optional integer seed that ChatGPT uses to try and make output
more reproducible.}

\item{\code{echo}}{One of the following options:
\itemize{
\item \code{none}: don't emit any output (default when running in a function).
\item \code{text}: echo text output as it streams in (default when running at
the console).
\item \code{all}: echo all input and output.
}

Note this only affects the \code{chat()} method.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-get_turns"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-get_turns}{}}}
\subsection{Method \code{get_turns()}}{
Retrieve the turns that have been sent and received so far
(optionally starting with the system prompt, if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$get_turns(include_system_prompt = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_system_prompt}}{Whether to include the system prompt in the
turns (if any exists).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-set_turns"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-set_turns}{}}}
\subsection{Method \code{set_turns()}}{
Replace existing turns with a new list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$set_turns(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A list of \link{Turn}s.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-get_system_prompt"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-get_system_prompt}{}}}
\subsection{Method \code{get_system_prompt()}}{
If set, the system prompt, it not, \code{NULL}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$get_system_prompt()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-set_system_prompt"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-set_system_prompt}{}}}
\subsection{Method \code{set_system_prompt()}}{
Update the system prompt
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$set_system_prompt(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{A string giving the new system prompt}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-tokens"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-tokens}{}}}
\subsection{Method \code{tokens()}}{
List the number of tokens consumed by each assistant turn.
Currently tokens are recorded for assistant turns only; so user
turns will have zeros.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$tokens()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-last_turn"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-last_turn}{}}}
\subsection{Method \code{last_turn()}}{
The last turn returned by the assistant.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$last_turn(role = c("assistant", "user", "system"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{role}}{Optionally, specify a role to find the last turn with
for the role.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Either a \code{Turn} or \code{NULL}, if no turns with the specified
role have occurred.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-chat"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-chat}{}}}
\subsection{Method \code{chat()}}{
Submit input to the chatbot, and return the response as a
simple string (probably Markdown).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$chat(..., echo = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{The input to send to the chatbot. Can be strings or images
(see \code{\link[=content_image_file]{content_image_file()}} and \code{\link[=content_image_url]{content_image_url()}}.}

\item{\code{echo}}{Whether to emit the response to stdout as it is received. If
\code{NULL}, then the value of \code{echo} set when the chat object was created
will be used.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-extract_data"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-extract_data}{}}}
\subsection{Method \code{extract_data()}}{
Extract structured data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$extract_data(..., type, echo = "none")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{The input to send to the chatbot. Will typically include
the phrase "extract structured data".}

\item{\code{type}}{A type specification for the extracted data. Should be
created with a \code{\link[=type_boolean]{type_()}} function.}

\item{\code{echo}}{Whether to emit the response to stdout as it is received.
Set to "text" to stream JSON data as it's generated (not supported by
all providers).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-extract_data_async"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-extract_data_async}{}}}
\subsection{Method \code{extract_data_async()}}{
Extract structured data, asynchronously. Returns a promise
that resolves to an object matching the type specification.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$extract_data_async(..., type, echo = "none")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{The input to send to the chatbot. Will typically include
the phrase "extract structured data".}

\item{\code{type}}{A type specification for the extracted data. Should be
created with a \code{\link[=type_boolean]{type_()}} function.}

\item{\code{echo}}{Whether to emit the response to stdout as it is received.
Set to "text" to stream JSON data as it's generated (not supported by
all providers).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-chat_async"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-chat_async}{}}}
\subsection{Method \code{chat_async()}}{
Submit input to the chatbot, and receive a promise that
resolves with the response all at once. Returns a promise that resolves
to a string (probably Markdown).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$chat_async(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{The input to send to the chatbot. Can be strings or images.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-stream"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-stream}{}}}
\subsection{Method \code{stream()}}{
Submit input to the chatbot, returning streaming results.
Returns A \href{https://coro.r-lib.org/articles/generator.html#iterating}{coro generator}
that yields strings. While iterating, the generator will block while
waiting for more content from the chatbot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$stream(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{The input to send to the chatbot. Can be strings or images.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-stream_async"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-stream_async}{}}}
\subsection{Method \code{stream_async()}}{
Submit input to the chatbot, returning asynchronously
streaming results. Returns a \href{https://coro.r-lib.org/reference/async_generator.html}{coro async generator} that
yields string promises.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$stream_async(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{The input to send to the chatbot. Can be strings or images.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-register_tool"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-register_tool}{}}}
\subsection{Method \code{register_tool()}}{
Register a tool (an R function) that the chatbot can use.
If the chatbot decides to use the function,  elmer will automatically
call it and submit the results back.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$register_tool(tool_def)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tool_def}}{Tool definition created by \code{\link[=tool]{tool()}}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
