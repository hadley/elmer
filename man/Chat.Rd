% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chat.R
\name{Chat}
\alias{Chat}
\title{Chat object}
\value{
A promise that resolves to a string (probably Markdown).
}
\description{
The Chat object represents a sequence of messages between the user and
chat API. You should generally not create this object yourself, but instead
call \code{\link[=new_chat_openai]{new_chat_openai()}} or friends.
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{system_prompt}}{The system prompt, if any, as a string.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Chat-new}{\code{Chat$new()}}
\item \href{#method-Chat-messages}{\code{Chat$messages()}}
\item \href{#method-Chat-chat}{\code{Chat$chat()}}
\item \href{#method-Chat-chat_async}{\code{Chat$chat_async()}}
\item \href{#method-Chat-stream}{\code{Chat$stream()}}
\item \href{#method-Chat-stream_async}{\code{Chat$stream_async()}}
\item \href{#method-Chat-console}{\code{Chat$console()}}
\item \href{#method-Chat-register_tool}{\code{Chat$register_tool()}}
\item \href{#method-Chat-clone}{\code{Chat$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-new"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$new(model, messages, seed = NULL, echo = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{model}}{Model object.}

\item{\code{messages}}{An unnamed list of messages to start the chat with (i.e.,
continuing a previous conversation). If \code{NULL} or zero-length list, the
conversation begins from scratch.}

\item{\code{seed}}{Optional integer seed that ChatGPT uses to try and make output
more reproducible.}

\item{\code{echo}}{If \code{TRUE}, the \code{chat()} method streams the response to stdout
(while also returning the final response). Note that this has no effect
on the \code{stream()}, \code{chat_async()}, and \code{stream_async()} methods.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-messages"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-messages}{}}}
\subsection{Method \code{messages()}}{
The messages that have been sent and received so far
(optionally starting with the system prompt, if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$messages(include_system_prompt = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_system_prompt}}{Whether to include the system prompt in the
messages (if any exists).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-chat"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-chat}{}}}
\subsection{Method \code{chat()}}{
Submit input to the chatbot, and return the response as a
simple string (probably Markdown).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$chat(..., echo = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{The input to send to the chatbot. Can be strings or images
(see \code{\link[=content_image_file]{content_image_file()}} and \code{\link[=content_image_url]{content_image_url()}}.}

\item{\code{echo}}{Whether to emit the response to stdout as it is received. If
\code{NULL}, then the value of \code{echo} set when the chat object was created
will be used.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-chat_async"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-chat_async}{}}}
\subsection{Method \code{chat_async()}}{
Submit input to the chatbot, and receive a promise that
resolves with the response all at once.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$chat_async(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{The input to send to the chatbot. Can be strings or images.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-stream"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-stream}{}}}
\subsection{Method \code{stream()}}{
Submit input to the chatbot, returning streaming results.
Returns A \href{https://coro.r-lib.org/articles/generator.html#iterating}{coro generator}
that yields strings. While iterating, the generator will block while
waiting for more content from the chatbot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$stream(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{The input to send to the chatbot. Can be strings or images.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-stream_async"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-stream_async}{}}}
\subsection{Method \code{stream_async()}}{
Submit input to the chatbot, returning asynchronously
streaming results. Returns a \href{https://coro.r-lib.org/reference/async_generator.html}{coro async generator} that
yields string promises.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$stream_async(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{The input to send to the chatbot. Can be strings or images.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-console"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-console}{}}}
\subsection{Method \code{console()}}{
Enter an interactive chat console. This is a REPL-like
interface where you can chat with the assistant in real-time. (Only
available in \code{\link[=interactive]{interactive()}} mode.)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$console(quiet = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{quiet}}{If \code{TRUE}, suppresses the initial message that explains how
to use the console.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-register_tool"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-register_tool}{}}}
\subsection{Method \code{register_tool()}}{
Register a tool (an R function) that the chatbot can use.
If the chatbot decides to use the function, elmer will automatically
call it and submit the results back. (See \code{\link[=create_tool_metadata]{create_tool_metadata()}} for
an AI-enabled helper function that can write a \code{register_tool} call
for you in some cases.)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$register_tool(fun, name, description, arguments, strict = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fun}}{The function to be invoked when the tool is called.}

\item{\code{name}}{The name of the function.}

\item{\code{description}}{A detailed description of what the function does.
Generally, the more information that you can provide here, the better.}

\item{\code{arguments}}{A named list of arguments that the function accepts.
Should be a named list of objects created by \code{\link[=tool_arg]{tool_arg()}}.}

\item{\code{strict}}{Should the argument definition be strictly enforced? If
\code{TRUE}, enables \href{https://platform.openai.com/docs/guides/structured-outputs}{Structured Output}
mode, which comes with a number of \href{https://platform.openai.com/docs/guides/structured-outputs/supported-schemas}{additional requirements}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Chat-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Chat-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chat$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
